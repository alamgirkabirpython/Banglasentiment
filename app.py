
import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense, Dropout, LSTM, Bidirectional
import streamlit as st
import pandas as pd
import json
import bcrypt
import nltk
# Set a download path in the temporary directory
nltk_data_dir = '/tmp/nltk_data'

# Ensure the directory exists
os.makedirs(nltk_data_dir, exist_ok=True)

# Download the 'punkt' tokenizer to the local directory
nltk.download('punkt', download_dir=nltk_data_dir)

# Append the local directory to NLTK's data path
nltk.data.path.append(nltk_data_dir)

def model_train(df, text_column, label_column):
    encoder = LabelEncoder()
    df[label_column] = encoder.fit_transform(df[label_column])
    
    tokenizer = Tokenizer()
    tokenizer.fit_on_texts(df[text_column])
    sequences = tokenizer.texts_to_sequences(df[text_column])
    max_length = max([len(x) for x in sequences])
    
    X = pad_sequences(sequences, maxlen=max_length, padding='post')
    y = df[label_column]
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    vocab_size = len(tokenizer.word_index) + 1
    embedding_dim = 64

    # Model 1: Conv1D-based model
    model_conv1d = Sequential([
        Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_length),
        Conv1D(128, 5, activation='relu'),
        GlobalMaxPooling1D(),
        Dropout(0.5),
        Dense(64, activation='relu'),
        Dense(len(y.unique()), activation='softmax')
    ])

    model_conv1d.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    model_conv1d.fit(X_train, y_train, epochs=15, validation_data=(X_test, y_test), batch_size=32)

    # Model 2: Bidirectional LSTM-based model
    model_lstm = Sequential([
        Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_length),
        Bidirectional(LSTM(64, return_sequences=True)),
        GlobalMaxPooling1D(),
        Dropout(0.5),
        Dense(64, activation='relu'),
        Dense(len(y.unique()), activation='softmax')
    ])

    model_lstm.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    model_lstm.fit(X_train, y_train, epochs=15, validation_data=(X_test, y_test), batch_size=32)
    
    return model_conv1d, model_lstm, tokenizer, encoder, X_test, y_test, max_length


def predict_sentiment(text, model, tokenizer, encoder,max_length):
    text_seq = tokenizer.texts_to_sequences([text])
    text_pad = pad_sequences(text_seq, maxlen=max_length, padding='post')
    prediction = model.predict(text_pad)
    predicted_label = encoder.inverse_transform([prediction.argmax(axis=1)[0]])[0]
    return predicted_label


import nltk
import re

nltk.download('punkt')

emoji_dict = {
    "ЁЯШК": "рж╣рж╛рж╕рж┐",
    "ЁЯШв": "ржХрж╛ржирзНржирж╛",
    "ЁЯШа": "рж░рж╛ржЧ",
    "ЁЯШФ": "ржоржи ржЦрж╛рж░рж╛ржк",
    "ЁЯСН": "ржжрж╛рж░рзБржг",
    "ЁЯШО": "ржарж╛ржирзНржбрж╛",
    "ЁЯШн": "ржЕрж╢рзНрж░рзБ",
    "ЁЯШБ": "ржорзБржЪржХрж┐ рж╣рж╛рж╕рж┐",
    "ЁЯШЕ": "рж╣рж╛рж▓ржХрж╛ рж╣рж╛рж╕рж┐",
    "ЁЯШН": "ржнрж╛рж▓ржмрж╛рж╕рж╛",
    "ЁЯШТ": "ржЕрж╕ржирзНрждрзБрж╖рзНржЯ",
    "ЁЯШЮ": "рж╣рждрж╛рж╢рж╛",
    "ЁЯШб": "рж░рж╛ржЧрж╛ржирзНржмрж┐ржд",
    "ЁЯШГ": "ржЦрзБрж╢рж┐",
    "ЁЯШЙ": "ржЪрзЛржЦ ржорж╛рж░рж╛",
    "ЁЯШЛ": "рж╕рзНржмрж╛ржж ржЖрж╕рзНржмрж╛ржжржи",
    "ЁЯШР": "ржирж┐рж░рзНржмрж┐ржХрж╛рж░",
    "ЁЯШд": "ржЕрж╕ржирзНрждрзБрж╖рзНржЯ",
    "ЁЯШ┤": "ржШрзБржо",
    "ЁЯШЬ": "ржоржЬрж╛рж░",
    "ЁЯШй": "ржХрзНрж▓рж╛ржирзНржд",
    "ЁЯШп": "ржЖрж╢рзНржЪрж░рзНржп",
    "ЁЯШЖ": "рж╣рж╛рж╕рж┐",
    "ЁЯШ╖": "ржорж╛рж╕рзНржХ",
    "ЁЯЩД": "ржЧрзБрж░рзНржЧрзБрж░рж╛ржирж┐",
    "ЁЯШ│": "ржмрж┐рж╕рзНржорж┐ржд",
    "ЁЯШм": "ржЪрж┐ржирзНрждрж┐ржд",
    "ЁЯШЪ": "ржЪрзБржорзНржмржи",
    "ЁЯШ░": "ржЙржжрзНржмрж┐ржЧрзНржи",
    "ЁЯдЧ": "ржЖрж▓рж┐ржЩрзНржЧржи",
    "ЁЯдФ": "ржЪрж┐ржирзНрждрж╛рж╢рзАрж▓",
    "ЁЯдР": "ржорзБржЦ ржмржирзНржз",
    "ЁЯШЗ": "ржкрзБржгрзНржпржмрж╛ржи"
}

bn_stopwords = ['ржЖржорж┐', 'ржЖржкржирж┐', 'рж╕рзЗ', 'рждрзБржорж┐', 'ржЖржорж░рж╛', 'ржЖржкржирж╛рж░рж╛', 'рждрж╛рж░рж╛', 'ржПрж░', 'ржПржЗ', 'ржУржЗ', 'рждрж╛рж░', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржЖржкржирж╛рж░', 'рждрзЛржорж╛рж░', 'ржЖржкржирж╛рж░рж╛', 'ржЖржорж░рж╛', 'ржпрзЗ', 'ржпржд', 'рж╕ржм', 'ржХрж┐ржЫрзБ', 'ржмрж╣рзБ', 'ржХрзЛржирзЛ', 'ржХрзЛржи', 'ржПржХржЯрж┐', 'ржПржЯрж┐', 'рждрж┐ржи', 'ржЪрж╛рж░', 'ржПржЦрж╛ржирзЗ', 'ржпрзЗржЦрж╛ржирзЗ', 'ржПржЦрж╛ржирзЗ', 'ржХрж┐ржнрж╛ржмрзЗ', 'ржХрзАржнрж╛ржмрзЗ', 'ржХрзЗржи', 'ржХрзЗржиржирж╛', 'ржпржЦржи', 'ржпржжрж┐', 'рждржмрзЗ', 'ржХрж┐ржирзНрждрзБ', 'рждржмрзЗ', 'ржЖрж░', 'рждрж┐ржи', 'ржЪрж╛рж░', 'ржЕржержмрж╛', 'ржирж╛рж╣рж▓рзЗ', 'ржпржд', 'ржпрзЗржоржи', 'ржХрж┐ржирзНрждрзБ', 'ржирж┐рж╢рзНржЪрж┐ржд', 'рж╕ржмрж╛ржЗ', 'ржЕржирзЗржХ', 'ржХрж┐ржЫрзБ', 'ржХрзЗржиржирж╛', 'ржЕржирзНржп', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржмрзЗрж╢рж┐', 'ржХржо', 'ржЕржирзНрждржд', 'ржмрзЗрж╢рж┐', 'ржХржо', 'ржПржмржВ', 'ржЕржержмрж╛', 'ржирж┐рж░рзНржмрж╛ржЪржи', 'ржПржЗ', 'ржУржЗ', 'ржлрж┐рж░рзЗ', 'рждрж╛рж░ржкрж░', 'ржкрж░рзЗ', 'ржЖржЧрзЗ', 'рждржЦржи', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржпрзЗ', 'рждржмрзЗ', 'ржЕржержмрж╛', 'ржПржХржЯрж┐', 'ржЕржержмрж╛', 'ржЕржмрж╢рзНржп', 'ржПрж░ржкрж░', 'ржЖржорж░рж╛', 'ржмрж┐ржнрж┐ржирзНржи', 'рж╕ржХрж▓', 'ржпрзЗржЦрж╛ржирзЗ', 'ржПржЦрж╛ржирзЗ', 'ржХрж┐', 'ржорж╛ржЭрзЗ', 'ржоржзрзНржпрзЗ', 'ржоржзрзНржпржмрж░рзНрждрзА', 'ржпрзЗ', 'рж╢рзБржзрзБ', 'ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп', 'ржЕржзрж┐ржХ', 'ржпрзЗржоржи', 'ржмрж┐ржнрж┐ржирзНржи', 'ржЕржкрж░', 'ржЕржирзНржп', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржпрж╛ржирзНржп', 'ржЖрж░', 'ржпрж╛ржУржпрж╝рж╛', 'ржЖрж╕рж╛', 'ржХрзА', 'ржпржЦржи', 'ржПржЯрж┐', 'ржХрж╛рж░ржгрзЗ', 'рждрж╛рж░ржкрж░', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржЖрж░ржУ', 'ржЕржмрж╢рзНржпржЗ', 'ржПржмржВ', 'ржЕржержмрж╛', 'ржмрж┐рж╢рзЗрж╖', 'ржХрж┐', 'ржмрзНржпрж╛ржкрж╛рж░рзЗ', 'ржЕржержмрж╛', 'ржжрзНржмрж╛рж░рж╛', 'рждрж╛рж░рж╛', 'ржПржХ', 'ржоржзрзНржпрзЗ', 'ржХрж┐ржЫрзБ', 'рждржмрзЗ', 'ржПржЫрж╛ржбрж╝рж╛', 'ржоржзрзНржпрзЗ', 'ржХрзЛржирзЛ', 'ржЕржирзНржп', 'ржкрзНрж░рждрж┐ржЯрж┐', 'ржПржХржЯрж┐', 'ржпрзЗржЦрж╛ржирзЗ', 'ржпржд', 'ржпрзЗ', 'ржпржжрж┐', 'ржЖрж░', 'ржЕржирзЗржХ', 'ржпрзЗржоржи', 'ржпрзЗржоржи', 'рждрж╛рж░', 'ржнрзЗрждрж░рзЗ', 'ржжрзНржмрж╛рж░рж╛', 'ржПрж░', 'ржЖржЫрзЗ', 'ржжрж┐ржпрж╝рзЗ', 'ржпрж╛ржУржпрж╝рж╛', 'ржЖрж╕рж╛', 'ржпрзЗ', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржпрзЗржоржи', 'ржлрж┐рж░рзЗ', 'ржкрж░рзЗрж░', 'рж╕ржХрж▓', 'рждрж╛ржжрзЗрж░', 'рж╕ржм', 'ржЕржирзНржпрж╛ржирзНржп', 'ржЖрж░ржУ', 'ржХрзЛржи', 'ржПржЦрж╛ржирзЗ', 'ржпржЦржи', 'рждржмрзЗ', 'рждрж╛ржжрзЗрж░', 'ржлрж┐рж░рзЗ', 'ржпрзЗржЦрж╛ржирзЗ', 'ржЖрж░ржУ', 'ржЖржорж░рж╛', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржп', 'ржирждрзБржи', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржп', 'рж╕ржмрж╛рж░', 'ржЕржкрж░', 'ржорж╛ржЭрзЗ', 'ржмрж┐ржнрж┐ржирзНржи', 'ржПржЗ', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржПржЗ', 'ржпрзЗржоржи', 'ржЕрждржПржм', 'ржПрж░ржкрж░', 'ржирждрзБржи', 'рж╕рж░рзНржмрзЛржЪрзНржЪ', 'рж╕рж░рзНржмржирж┐ржорзНржи', 'ржорж╛ржЭрзЗ', 'ржЖржорж┐', 'ржЖржкржирж┐', 'рж╕рзЗ', 'рждрзБржорж┐', 'ржЖржорж░рж╛', 'ржЖржкржирж╛рж░рж╛', 'рждрж╛рж░рж╛', 'ржПрж░', 'ржПржЗ', 'ржУржЗ', 'рждрж╛рж░', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржЖржкржирж╛рж░', 'рждрзЛржорж╛рж░', 'ржЖржкржирж╛рж░рж╛', 'ржЖржорж░рж╛', 'ржпрзЗ', 'ржпржд', 'рж╕ржм', 'ржХрж┐ржЫрзБ', 'ржмрж╣рзБ', 'ржХрзЛржирзЛ', 'ржХрзЛржи', 'ржПржХржЯрж┐', 'ржПржЯрж┐', 'рждрж┐ржи', 'ржЪрж╛рж░', 'ржПржЦрж╛ржирзЗ', 'ржпрзЗржЦрж╛ржирзЗ', 'ржПржЦрж╛ржирзЗ', 'ржХрж┐ржнрж╛ржмрзЗ', 'ржХрзАржнрж╛ржмрзЗ', 'ржХрзЗржи', 'ржХрзЗржиржирж╛', 'ржпржЦржи', 'ржпржжрж┐', 'рждржмрзЗ', 'ржХрж┐ржирзНрждрзБ', 'рждржмрзЗ', 'ржЖрж░', 'рждрж┐ржи', 'ржЪрж╛рж░', 'ржЕржержмрж╛', 'ржирж╛рж╣рж▓рзЗ', 'ржпржд', 'ржпрзЗржоржи', 'ржХрж┐ржирзНрждрзБ', 'ржирж┐рж╢рзНржЪрж┐ржд', 'рж╕ржмрж╛ржЗ', 'ржЕржирзЗржХ', 'ржХрж┐ржЫрзБ', 'ржХрзЗржиржирж╛', 'ржЕржирзНржп', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржмрзЗрж╢рж┐', 'ржХржо', 'ржЕржирзНрждржд', 'ржмрзЗрж╢рж┐', 'ржХржо', 'ржПржмржВ', 'ржЕржержмрж╛', 'ржирж┐рж░рзНржмрж╛ржЪржи', 'ржПржЗ', 'ржУржЗ', 'ржлрж┐рж░рзЗ', 'рждрж╛рж░ржкрж░', 'ржкрж░рзЗ', 'ржЖржЧрзЗ', 'рждржЦржи', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржпрзЗ', 'рждржмрзЗ', 'ржЕржержмрж╛', 'ржПржХржЯрж┐', 'ржЕржержмрж╛', 'ржЕржмрж╢рзНржп', 'ржПрж░ржкрж░', 'ржЖржорж░рж╛', 'ржмрж┐ржнрж┐ржирзНржи', 'рж╕ржХрж▓', 'ржпрзЗржЦрж╛ржирзЗ', 'ржПржЦрж╛ржирзЗ', 'ржХрж┐', 'ржорж╛ржЭрзЗ', 'ржоржзрзНржпрзЗ', 'ржоржзрзНржпржмрж░рзНрждрзА', 'ржпрзЗ', 'рж╢рзБржзрзБ', 'ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп', 'ржЕржзрж┐ржХ', 'ржпрзЗржоржи', 'ржмрж┐ржнрж┐ржирзНржи', 'ржЕржкрж░', 'ржЕржирзНржп', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржпрж╛ржирзНржп', 'ржЖрж░', 'ржпрж╛ржУржпрж╝рж╛', 'ржЖрж╕рж╛', 'ржХрзА', 'ржпржЦржи', 'ржПржЯрж┐', 'ржХрж╛рж░ржгрзЗ', 'рждрж╛рж░ржкрж░', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржЖрж░ржУ', 'ржЕржмрж╢рзНржпржЗ', 'ржПржмржВ', 'ржЕржержмрж╛', 'ржмрж┐рж╢рзЗрж╖', 'ржХрж┐', 'ржмрзНржпрж╛ржкрж╛рж░рзЗ', 'ржЕржержмрж╛', 'ржжрзНржмрж╛рж░рж╛', 'рждрж╛рж░рж╛', 'ржПржХ', 'ржоржзрзНржпрзЗ', 'ржХрж┐ржЫрзБ', 'рждржмрзЗ', 'ржПржЫрж╛ржбрж╝рж╛', 'ржоржзрзНржпрзЗ', 'ржХрзЛржирзЛ', 'ржЕржирзНржп', 'ржкрзНрж░рждрж┐ржЯрж┐', 'ржПржХржЯрж┐', 'ржпрзЗржЦрж╛ржирзЗ', 'ржпржд', 'ржпрзЗ', 'ржпржжрж┐', 'ржЖрж░', 'ржЕржирзЗржХ', 'ржпрзЗржоржи', 'ржпрзЗржоржи', 'рждрж╛рж░', 'ржнрзЗрждрж░рзЗ', 'ржжрзНржмрж╛рж░рж╛', 'ржПрж░', 'ржЖржЫрзЗ', 'ржжрж┐ржпрж╝рзЗ', 'ржпрж╛ржУржпрж╝рж╛', 'ржЖрж╕рж╛', 'ржпрзЗ', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржпрзЗржоржи', 'ржлрж┐рж░рзЗ', 'ржкрж░рзЗрж░', 'рж╕ржХрж▓', 'рждрж╛ржжрзЗрж░', 'рж╕ржм', 'ржЕржирзНржпрж╛ржирзНржп', 'ржЖрж░ржУ', 'ржХрзЛржи', 'ржПржЦрж╛ржирзЗ', 'ржпржЦржи', 'рждржмрзЗ', 'рждрж╛ржжрзЗрж░', 'ржлрж┐рж░рзЗ', 'ржпрзЗржЦрж╛ржирзЗ', 'ржЖрж░ржУ', 'ржЖржорж░рж╛', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржп', 'ржирждрзБржи', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржп', 'рж╕ржмрж╛рж░', 'ржЕржкрж░', 'ржорж╛ржЭрзЗ', 'ржмрж┐ржнрж┐ржирзНржи', 'ржПржЗ', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржПржЗ', 'ржпрзЗржоржи', 'ржЕрждржПржм', 'ржПрж░ржкрж░', 'ржирждрзБржи', 'рж╕рж░рзНржмрзЛржЪрзНржЪ', 'рж╕рж░рзНржмржирж┐ржорзНржи', 'ржорж╛ржЭрзЗ', 'ржЖржорж┐', 'ржЖржкржирж┐', 'рж╕рзЗ', 'рждрзБржорж┐', 'ржЖржорж░рж╛', 'ржЖржкржирж╛рж░рж╛', 'рждрж╛рж░рж╛', 'ржПрж░', 'ржПржЗ', 'ржУржЗ', 'рждрж╛рж░', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржЖржкржирж╛рж░', 'рждрзЛржорж╛рж░', 'ржЖржкржирж╛рж░рж╛', 'ржЖржорж░рж╛', 'ржпрзЗ', 'ржпржд', 'рж╕ржм', 'ржХрж┐ржЫрзБ', 'ржмрж╣рзБ', 'ржХрзЛржирзЛ', 'ржХрзЛржи', 'ржПржХржЯрж┐', 'ржПржЯрж┐', 'рждрж┐ржи', 'ржЪрж╛рж░', 'ржПржЦрж╛ржирзЗ', 'ржпрзЗржЦрж╛ржирзЗ', 'ржПржЦрж╛ржирзЗ', 'ржХрж┐ржнрж╛ржмрзЗ', 'ржХрзАржнрж╛ржмрзЗ', 'ржХрзЗржи', 'ржХрзЗржиржирж╛', 'ржпржЦржи', 'ржпржжрж┐', 'рждржмрзЗ', 'ржХрж┐ржирзНрждрзБ', 'рждржмрзЗ', 'ржЖрж░', 'рждрж┐ржи', 'ржЪрж╛рж░', 'ржЕржержмрж╛', 'ржирж╛рж╣рж▓рзЗ', 'ржпржд', 'ржпрзЗржоржи', 'ржХрж┐ржирзНрждрзБ', 'ржирж┐рж╢рзНржЪрж┐ржд', 'рж╕ржмрж╛ржЗ', 'ржЕржирзЗржХ', 'ржХрж┐ржЫрзБ', 'ржХрзЗржиржирж╛', 'ржЕржирзНржп', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржмрзЗрж╢рж┐', 'ржХржо', 'ржЕржирзНрждржд', 'ржмрзЗрж╢рж┐', 'ржХржо', 'ржПржмржВ', 'ржЕржержмрж╛', 'ржирж┐рж░рзНржмрж╛ржЪржи', 'ржПржЗ', 'ржУржЗ', 'ржлрж┐рж░рзЗ', 'рждрж╛рж░ржкрж░', 'ржкрж░рзЗ', 'ржЖржЧрзЗ', 'рждржЦржи', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржпрзЗ', 'рждржмрзЗ', 'ржЕржержмрж╛', 'ржПржХржЯрж┐', 'ржЕржержмрж╛', 'ржЕржмрж╢рзНржп', 'ржПрж░ржкрж░', 'ржЖржорж░рж╛', 'ржмрж┐ржнрж┐ржирзНржи', 'рж╕ржХрж▓', 'ржпрзЗржЦрж╛ржирзЗ', 'ржПржЦрж╛ржирзЗ', 'ржХрж┐', 'ржорж╛ржЭрзЗ', 'ржоржзрзНржпрзЗ', 'ржоржзрзНржпржмрж░рзНрждрзА', 'ржпрзЗ', 'рж╢рзБржзрзБ', 'ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп', 'ржЕржзрж┐ржХ', 'ржпрзЗржоржи', 'ржмрж┐ржнрж┐ржирзНржи', 'ржЕржкрж░', 'ржЕржирзНржп', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржпрж╛ржирзНржп', 'ржЖрж░', 'ржпрж╛ржУржпрж╝рж╛', 'ржЖрж╕рж╛', 'ржХрзА', 'ржпржЦржи', 'ржПржЯрж┐', 'ржХрж╛рж░ржгрзЗ', 'рждрж╛рж░ржкрж░', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржЖрж░ржУ', 'ржЕржмрж╢рзНржпржЗ', 'ржПржмржВ', 'ржЕржержмрж╛', 'ржмрж┐рж╢рзЗрж╖', 'ржХрж┐', 'ржмрзНржпрж╛ржкрж╛рж░рзЗ', 'ржЕржержмрж╛', 'ржжрзНржмрж╛рж░рж╛', 'рждрж╛рж░рж╛', 'ржПржХ', 'ржоржзрзНржпрзЗ', 'ржХрж┐ржЫрзБ', 'рждржмрзЗ', 'ржПржЫрж╛ржбрж╝рж╛', 'ржоржзрзНржпрзЗ', 'ржХрзЛржирзЛ', 'ржЕржирзНржп', 'ржкрзНрж░рждрж┐ржЯрж┐', 'ржПржХржЯрж┐', 'ржпрзЗржЦрж╛ржирзЗ', 'ржпржд', 'ржпрзЗ', 'ржпржжрж┐', 'ржЖрж░', 'ржЕржирзЗржХ', 'ржпрзЗржоржи', 'ржпрзЗржоржи', 'рждрж╛рж░', 'ржнрзЗрждрж░рзЗ', 'ржжрзНржмрж╛рж░рж╛', 'ржПрж░', 'ржЖржЫрзЗ', 'ржжрж┐ржпрж╝рзЗ', 'ржпрж╛ржУржпрж╝рж╛', 'ржЖрж╕рж╛', 'ржпрзЗ', 'ржирждрзБржи', 'ржкрзБрж░рж╛ржирзЛ', 'ржпрзЗржоржи', 'ржлрж┐рж░рзЗ', 'ржкрж░рзЗрж░', 'рж╕ржХрж▓', 'рждрж╛ржжрзЗрж░', 'рж╕ржм', 'ржЕржирзНржпрж╛ржирзНржп', 'ржЖрж░ржУ', 'ржХрзЛржи', 'ржПржЦрж╛ржирзЗ', 'ржпржЦржи', 'рждржмрзЗ', 'рждрж╛ржжрзЗрж░', 'ржлрж┐рж░рзЗ', 'ржпрзЗржЦрж╛ржирзЗ', 'ржЖрж░ржУ', 'ржЖржорж░рж╛', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржп', 'ржирждрзБржи', 'ржХрж┐ржЫрзБ', 'ржЕржирзНржп', 'рж╕ржмрж╛рж░', 'ржЕржкрж░', 'ржорж╛ржЭрзЗ', 'ржмрж┐ржнрж┐ржирзНржи', 'ржПржЗ', 'рждрж╛ржжрзЗрж░', 'ржЖржорж╛ржжрзЗрж░', 'ржПржЗ', 'ржпрзЗржоржи', 'ржЕрждржПржм', 'ржПрж░ржкрж░', 'ржирждрзБржи', 'рж╕рж░рзНржмрзЛржЪрзНржЪ', 'рж╕рж░рзНржмржирж┐ржорзНржи', 'ржорж╛ржЭрзЗ', 'ржЕрждржПржм', 'ржЕржержЪ', 'ржЕржержмрж╛', 'ржЕржирзБржпрж╛ржпрж╝рзА', 'ржЕржирзЗржХ', 'ржЕржирзЗржХрзЗ', 'ржЕржирзЗржХрзЗржЗ', 'ржЕржирзНрждржд', 'ржЕржирзНржп', 'ржЕржмржзрж┐', 'ржЕржмрж╢рзНржп', 'ржЕрж░рзНржерж╛ржд', 'ржЖржЗ', 'ржЖржЧрж╛ржорзА', 'ржЖржЧрзЗ', 'ржЖржЧрзЗржЗ', 'ржЖржЫрзЗ', 'ржЖржЬ', 'ржЖржжрзНржпржнрж╛ржЧрзЗ', 'ржЖржкржирж╛рж░', 'ржЖржкржирж┐', 'ржЖржмрж╛рж░', 'ржЖржорж░рж╛', 'ржЖржорж╛ржХрзЗ', 'ржЖржорж╛ржжрзЗрж░', 'ржЖржорж╛рж░', 'ржЖржорж┐', 'ржЖрж░', 'ржЖрж░ржУ', 'ржЗ', 'ржЗрждрзНржпрж╛ржжрж┐', 'ржЗрж╣рж╛', 'ржЙржЪрж┐ржд', 'ржЙрждрзНрждрж░', 'ржЙржирж┐', 'ржЙржкрж░', 'ржЙржкрж░рзЗ', 'ржП', 'ржПржБржжрзЗрж░', 'ржПржБрж░рж╛', 'ржПржЗ', 'ржПржХржЗ', 'ржПржХржЯрж┐', 'ржПржХржмрж╛рж░', 'ржПржХрзЗ', 'ржПржХрзН', 'ржПржЦржи', 'ржПржЦржиржУ', 'ржПржЦрж╛ржирзЗ', 'ржПржЦрж╛ржирзЗржЗ', 'ржПржЯрж╛', 'ржПржЯрж╛ржЗ', 'ржПржЯрж┐', 'ржПржд', 'ржПрждржЯрж╛ржЗ', 'ржПрждрзЗ', 'ржПржжрзЗрж░', 'ржПржм', 'ржПржмржВ', 'ржПржмрж╛рж░', 'ржПржоржи', 'ржПржоржиржХрзА', 'ржПржоржирж┐', 'ржПрж░', 'ржПрж░рж╛', 'ржПрж▓', 'ржПрж╕', 'ржПрж╕рзЗ', 'ржР', 'ржУ', 'ржУржБржжрзЗрж░', 'ржУржБрж░', 'ржУржБрж░рж╛', 'ржУржЗ', 'ржУржХрзЗ', 'ржУржЦрж╛ржирзЗ', 'ржУржжрзЗрж░', 'ржУрж░', 'ржУрж░рж╛', 'ржХржЦржиржУ', 'ржХржд', 'ржХржмрзЗ', 'ржХржоржирзЗ', 'ржХржпрж╝рзЗржХ', 'ржХржпрж╝рзЗржХржЯрж┐', 'ржХрж░ржЫрзЗ', 'ржХрж░ржЫрзЗржи', 'ржХрж░рждрзЗ', 'ржХрж░ржмрзЗ', 'ржХрж░ржмрзЗржи', 'ржХрж░рж▓рзЗ', 'ржХрж░рж▓рзЗржи', 'ржХрж░рж╛', 'ржХрж░рж╛ржЗ', 'ржХрж░рж╛ржпрж╝', 'ржХрж░рж╛рж░', 'ржХрж░рж┐', 'ржХрж░рж┐рждрзЗ', 'ржХрж░рж┐ржпрж╝рж╛', 'ржХрж░рж┐ржпрж╝рзЗ', 'ржХрж░рзЗ', 'ржХрж░рзЗржЗ', 'ржХрж░рзЗржЫрж┐рж▓рзЗржи', 'ржХрж░рзЗржЫрзЗ', 'ржХрж░рзЗржЫрзЗржи', 'ржХрж░рзЗржи', 'ржХрж╛ржЙржХрзЗ', 'ржХрж╛ржЫ', 'ржХрж╛ржЫрзЗ', 'ржХрж╛ржЬ', 'ржХрж╛ржЬрзЗ', 'ржХрж╛рж░ржУ', 'ржХрж╛рж░ржг', 'ржХрж┐', 'ржХрж┐ржВржмрж╛', 'ржХрж┐ржЫрзБ', 'ржХрж┐ржЫрзБржЗ', 'ржХрж┐ржирзНрждрзБ', 'ржХрзА', 'ржХрзЗ', 'ржХрзЗржЙ', 'ржХрзЗржЙржЗ', 'ржХрзЗржЦрж╛', 'ржХрзЗржи', 'ржХрзЛржЯрж┐', 'ржХрзЛржи', 'ржХрзЛржиржУ', 'ржХрзЛржирзЛ', 'ржХрзНрж╖рзЗрждрзНрж░рзЗ', 'ржХрзЯрзЗржХ', 'ржЦрзБржм', 'ржЧрж┐ржпрж╝рзЗ', 'ржЧрж┐ржпрж╝рзЗржЫрзЗ', 'ржЧрж┐рзЯрзЗ', 'ржЧрзБрж▓рж┐', 'ржЧрзЗржЫрзЗ', 'ржЧрзЗрж▓', 'ржЧрзЗрж▓рзЗ', 'ржЧрзЛржЯрж╛', 'ржЪрж▓рзЗ', 'ржЪрж╛ржи', 'ржЪрж╛ржпрж╝', 'ржЪрж╛рж░', 'ржЪрж╛рж▓рзБ', 'ржЪрзЗржпрж╝рзЗ', 'ржЪрзЗрж╖рзНржЯрж╛', 'ржЫрж╛ржбрж╝рж╛', 'ржЫрж╛ржбрж╝рж╛ржУ', 'ржЫрж┐рж▓', 'ржЫрж┐рж▓рзЗржи', 'ржЬржи', 'ржЬржиржХрзЗ', 'ржЬржирзЗрж░', 'ржЬржирзНржп', 'ржЬржирзНржпржУржЬрзЗ', 'ржЬрж╛ржирждрзЗ', 'ржЬрж╛ржирж╛', 'ржЬрж╛ржирж╛ржирзЛ', 'ржЬрж╛ржирж╛ржпрж╝', 'ржЬрж╛ржирж┐ржпрж╝рзЗ', 'ржЬрж╛ржирж┐ржпрж╝рзЗржЫрзЗ', 'ржЬрзЗ', 'ржЬрзНржиржЬржи', 'ржЯрж┐', 'ржарж┐ржХ', 'рждржЦржи', 'рждржд', 'рждржерж╛', 'рждржмрзБ', 'рждржмрзЗ', 'рждрж╛', 'рждрж╛ржБржХрзЗ', 'рждрж╛ржБржжрзЗрж░', 'рждрж╛ржБрж░', 'рждрж╛ржБрж░рж╛', 'рждрж╛ржБрж╛рж╣рж╛рж░рж╛', 'рждрж╛ржЗ', 'рждрж╛ржУ', 'рждрж╛ржХрзЗ', 'рждрж╛рждрзЗ', 'рждрж╛ржжрзЗрж░', 'рждрж╛рж░', 'рждрж╛рж░ржкрж░', 'рждрж╛рж░рж╛', 'рждрж╛рж░рзИ', 'рждрж╛рж╣рж▓рзЗ', 'рждрж╛рж╣рж╛', 'рждрж╛рж╣рж╛рждрзЗ', 'рждрж╛рж╣рж╛рж░', 'рждрж┐ржиржР', 'рждрж┐ржирж┐', 'рждрж┐ржирж┐ржУ', 'рждрзБржорж┐', 'рждрзБрж▓рзЗ', 'рждрзЗржоржи', 'рждрзЛ', 'рждрзЛржорж╛рж░', 'ржерж╛ржХржмрзЗ', 'ржерж╛ржХржмрзЗржи', 'ржерж╛ржХрж╛', 'ржерж╛ржХрж╛ржпрж╝', 'ржерж╛ржХрзЗ', 'ржерж╛ржХрзЗржи', 'ржерзЗржХрзЗ', 'ржерзЗржХрзЗржЗ', 'ржерзЗржХрзЗржУ', 'ржжрж┐ржХрзЗ', 'ржжрж┐рждрзЗ', 'ржжрж┐ржи', 'ржжрж┐ржпрж╝рзЗ', 'ржжрж┐ржпрж╝рзЗржЫрзЗ', 'ржжрж┐ржпрж╝рзЗржЫрзЗржи', 'ржжрж┐рж▓рзЗржи', 'ржжрзБ', 'ржжрзБржЗ', 'ржжрзБржЯрж┐', 'ржжрзБржЯрзЛ', 'ржжрзЗржУржпрж╝рж╛', 'ржжрзЗржУржпрж╝рж╛рж░', 'ржжрзЗржУрзЯрж╛', 'ржжрзЗржЦрждрзЗ', 'ржжрзЗржЦрж╛', 'ржжрзЗржЦрзЗ', 'ржжрзЗржи', 'ржжрзЗржпрж╝', 'ржжрзНржмрж╛рж░рж╛', 'ржзрж░рж╛', 'ржзрж░рзЗ', 'ржзрж╛ржорж╛рж░', 'ржирждрзБржи', 'ржиржпрж╝', 'ржирж╛', 'ржирж╛ржЗ', 'ржирж╛ржХрж┐', 'ржирж╛ржЧрж╛ржж', 'ржирж╛ржирж╛', 'ржирж┐ржЬрзЗ', 'ржирж┐ржЬрзЗржЗ', 'ржирж┐ржЬрзЗржжрзЗрж░', 'ржирж┐ржЬрзЗрж░', 'ржирж┐рждрзЗ', 'ржирж┐ржпрж╝рзЗ', 'ржирж┐рзЯрзЗ', 'ржирзЗржЗ', 'ржирзЗржУржпрж╝рж╛', 'ржирзЗржУржпрж╝рж╛рж░', 'ржирзЗржУрзЯрж╛', 'ржирзЯ', 'ржкржХрзНрж╖рзЗ', 'ржкрж░', 'ржкрж░рзЗ', 'ржкрж░рзЗржЗ', 'ржкрж░рзЗржУ', 'ржкрж░рзНржпржирзНржд', 'ржкрж╛ржУржпрж╝рж╛', 'ржкрж╛ржЪ', 'ржкрж╛рж░рж┐', 'ржкрж╛рж░рзЗ', 'ржкрж╛рж░рзЗржи', 'ржкрж┐', 'ржкрзЗржпрж╝рзЗ', 'ржкрзЗрзЯрзНрж░рзН', 'ржкрзНрж░рждрж┐', 'ржкрзНрж░ржержо', 'ржкрзНрж░ржнрзГрждрж┐', 'ржкрзНрж░ржпржирзНржд', 'ржкрзНрж░рж╛ржержорж┐ржХ', 'ржкрзНрж░рж╛ржпрж╝', 'ржкрзНрж░рж╛рзЯ', 'ржлрж▓рзЗ', 'ржлрж┐рж░рзЗ', 'ржлрзЗрж░', 'ржмржХрзНрждржмрзНржп', 'ржмржжрж▓рзЗ', 'ржмржи', 'ржмрж░ржВ', 'ржмрж▓рждрзЗ', 'ржмрж▓рж▓', 'ржмрж▓рж▓рзЗржи', 'ржмрж▓рж╛', 'ржмрж▓рзЗ', 'ржмрж▓рзЗржЫрзЗржи', 'ржмрж▓рзЗржи', 'ржмрж╕рзЗ', 'ржмрж╣рзБ', 'ржмрж╛', 'ржмрж╛ржжрзЗ', 'ржмрж╛рж░', 'ржмрж┐', 'ржмрж┐ржирж╛', 'ржмрж┐ржнрж┐ржирзНржи', 'ржмрж┐рж╢рзЗрж╖', 'ржмрж┐рж╖ржпрж╝ржЯрж┐', 'ржмрзЗрж╢', 'ржмрзЗрж╢рж┐', 'ржмрзНржпржмрж╣рж╛рж░', 'ржмрзНржпрж╛ржкрж╛рж░рзЗ', 'ржнрж╛ржмрзЗ', 'ржнрж╛ржмрзЗржЗ', 'ржорждрзЛ', 'ржорждрзЛржЗ', 'ржоржзрзНржпржнрж╛ржЧрзЗ', 'ржоржзрзНржпрзЗ', 'ржоржзрзНржпрзЗржЗ', 'ржоржзрзНржпрзЗржУ', 'ржоржирзЗ', 'ржорж╛рждрзНрж░', 'ржорж╛ржзрзНржпржорзЗ', 'ржорзЛржЯ', 'ржорзЛржЯрзЗржЗ', 'ржпржЦржи', 'ржпржд', 'ржпрждржЯрж╛', 'ржпржерзЗрж╖рзНржЯ', 'ржпржжрж┐', 'ржпржжрж┐ржУ', 'ржпрж╛', 'ржпрж╛ржБрж░', 'ржпрж╛ржБрж░рж╛', 'ржпрж╛ржУржпрж╝рж╛', 'ржпрж╛ржУржпрж╝рж╛рж░', 'ржпрж╛ржУрзЯрж╛', 'ржпрж╛ржХрзЗ', 'ржпрж╛ржЪрзНржЫрзЗ', 'ржпрж╛рждрзЗ', 'ржпрж╛ржжрзЗрж░', 'ржпрж╛ржи', 'ржпрж╛ржмрзЗ', 'ржпрж╛ржпрж╝', 'ржпрж╛рж░', 'ржпрж╛рж░рж╛', 'ржпрж┐ржирж┐', 'ржпрзЗ', 'ржпрзЗржЦрж╛ржирзЗ', 'ржпрзЗрждрзЗ', 'ржпрзЗржи', 'ржпрзЗржоржи', 'рж░', 'рж░ржХржо', 'рж░ржпрж╝рзЗржЫрзЗ', 'рж░рж╛ржЦрж╛', 'рж░рзЗржЦрзЗ', 'рж▓ржХрзНрж╖', 'рж╢рзБржзрзБ', 'рж╢рзБрж░рзБ', 'рж╕ржЩрзНржЧрзЗ', 'рж╕ржЩрзНржЧрзЗржУ', 'рж╕ржм', 'рж╕ржмрж╛рж░', 'рж╕ржорж╕рзНржд', 'рж╕ржорзНржкрзНрж░рждрж┐', 'рж╕рж╣', 'рж╕рж╣рж┐ржд', 'рж╕рж╛ржзрж╛рж░ржг', 'рж╕рж╛ржоржирзЗ', 'рж╕рж┐', 'рж╕рзБрждрж░рж╛ржВ', 'рж╕рзЗ', 'рж╕рзЗржЗ', 'рж╕рзЗржЦрж╛ржи', 'рж╕рзЗржЦрж╛ржирзЗ', 'рж╕рзЗржЯрж╛', 'рж╕рзЗржЯрж╛ржЗ', 'рж╕рзЗржЯрж╛ржУ', 'рж╕рзЗржЯрж┐', 'рж╕рзНржкрж╖рзНржЯ', 'рж╕рзНржмржпрж╝ржВ', 'рж╣ржЗрждрзЗ', 'рж╣ржЗржмрзЗ', 'рж╣ржЗржпрж╝рж╛', 'рж╣ржУржпрж╝рж╛', 'рж╣ржУржпрж╝рж╛ржпрж╝', 'рж╣ржУржпрж╝рж╛рж░', 'рж╣ржЪрзНржЫрзЗ', 'рж╣ржд', 'рж╣рждрзЗ', 'рж╣рждрзЗржЗ', 'рж╣ржи', 'рж╣ржмрзЗ', 'рж╣ржмрзЗржи', 'рж╣ржпрж╝', 'рж╣ржпрж╝рждрзЛ', 'рж╣ржпрж╝ржирж┐', 'рж╣ржпрж╝рзЗ', 'рж╣ржпрж╝рзЗржЗ', 'рж╣ржпрж╝рзЗржЫрж┐рж▓', 'рж╣ржпрж╝рзЗржЫрзЗ', 'рж╣ржпрж╝рзЗржЫрзЗржи', 'рж╣рж▓', 'рж╣рж▓рзЗ', 'рж╣рж▓рзЗржЗ', 'рж╣рж▓рзЗржУ', 'рж╣рж▓рзЛ', 'рж╣рж╛ржЬрж╛рж░', 'рж╣рж┐рж╕рж╛ржмрзЗ', 'рж╣рзИрж▓рзЗ', 'рж╣рзЛржХ', 'рж╣рзЯ']

def remove_stopwords(text):
    words = nltk.word_tokenize(text)
    filtered_words = [word for word in words if word not in bn_stopwords]
    return ' '.join(filtered_words)

def remove_non_bangla_words(text):
    return ' '.join([word for word in text.split() if all('ржА' <= c <= 'рз┐' for c in word)])

def remove_null_characters(text):
    return text.replace('\x00', '')

def remove_urls(text):
    url_pattern = re.compile(r'https?://\S+|www\.\S+')
    return url_pattern.sub(r'', text)

def replace_emojis(text):
    for emoji, meaning in emoji_dict.items():
        text = text.replace(emoji, meaning)
    return text

def preprocess_text(text):
    text = replace_emojis(text)
    text = remove_stopwords(text)
    text = remove_non_bangla_words(text)
    text = remove_null_characters(text)
    text = remove_urls(text)
    return text


# App logo and background images
logo_url = "https://img.freepik.com/free-vector/colorful-bird-illustration-gradient_343694-1741.jpg?size=626&ext=jpg&ga=GA1.1.733875022.1726100029&semt=ais_hybrid.png"
background_image_url = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e?crop=entropy&cs=tinysrgb&w=1080&fit=max"

# Set up Streamlit app configuration
st.set_page_config(page_title="Bangla Sentiment Analysis", page_icon=logo_url, layout="wide")

# Custom CSS for styling the app with background image
st.markdown(
    f"""
    <style>
    .stApp {{
        background-image: url("{background_image_url}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }}
    .stButton>button {{
        background-color: #3498db;
        color: white;
        border-radius: 10px;
    }}
    .stButton>button:hover {{
        background-color: #2980b9;
    }}
    .stTextInput, .stTextArea {{
        background-color: rgba(255, 255, 255, 0.8);
    }}
    h1, h2, h3 {{
        color: white;
        text-align: center;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }}
    .centered {{
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
    }}
    .dataframe-container {{
        width: 80%;
        margin: 0 auto;
        height: 150px;
        overflow-y: auto;
    }}
    </style>
    """,
    unsafe_allow_html=True
)

# Load users from a JSON file
users_file = 'users.json'

def load_users():
    if os.path.exists(users_file):
        with open(users_file, 'r') as file:
            return json.load(file)
    else:
        return {}

# Save users to a JSON file
def save_users(users_db):
    with open(users_file, 'w') as file:
        json.dump(users_db, file)

# Load user database from file
users_db = load_users()

# Caching the data loading function
@st.cache_data
def data_load(file_path):
    df = pd.read_csv(file_path)
    if df.isnull().values.any():
        st.warning("Warning: The dataset contains missing values. Please clean the data.")
    df['processed_text'] = df['text'].apply(preprocess_text)
    return df

# Caching the model training function
@st.cache_resource
def train_model(file_path):
    df = data_load(file_path)
    model1, model2, tokenizer, encoder, X_test, y_test, max_length = model_train(df, 'processed_text', 'label')
    return model1, model2, tokenizer, encoder, X_test, y_test, max_length

# Load the dataset and train models
file_path = "https://raw.githubusercontent.com/alamgirkabirpython/Banglasentiment/17d631b16b6e920ed8a2c8057a544ebb4e5d81db/bangla_sentiment_data.csv"
model1, model2, tokenizer, encoder, X_test, y_test, max_length = train_model(file_path)

# Function to hash passwords before storing them
def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

# Function to verify hashed passwords
def check_password(password, hashed):
    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))

# Display the app logo
st.image(logo_url, width=100)

# Main page title
st.title("Bangla Sentiment Analysis :heart_eyes: :cry:")

# Sidebar with example input texts
with st.sidebar:
    st.write("### Input Text Example:")
    st.code("ржЖржорж┐ ржЦрзБржм ржЦрж╛рж░рж╛ржк ржЖржЫрж┐ ЁЯШв", language="plain")
    st.code("рждрзБржорж┐ ржХрзЗржи ржПржоржи ржХрж░рж▓рзЗ? ЁЯШб", language="plain")
    st.code("рждрзБржорж┐ ржЖржорж╛ржХрзЗ рж░рж╛ржЧрж┐рзЯрзЗ ржжрж┐ржЪрзНржЫ ЁЯШа", language="plain")
    st.code("ржЖржЬржХрзЗ рж╕ржмржХрж┐ржЫрзБржЗ ржмрж┐рж░ржХрзНрждрж┐ржХрж░ ЁЯШб", language="plain")
    st.code("ржЖржЬ ржЖржорж╛рж░ ржЦрзБржм ржоржи ржЦрж╛рж░рж╛ржкред", language="plain")
    st.code("ржЖржорж┐ ржЦрзБржм ржПржХрж╛ ржмрзЛржз ржХрж░ржЫрж┐ред", language="plain")
    st.code("ржЬрзАржмржиржЯрж╛ ржХрзЗржи ржПржд ржХржарж┐ржи!", language="plain")
    st.code("ржХрж┐ржЫрзБржЗ ржпрзЗржи ржЖрж░ ржнрж╛рж▓рзЛ рж▓рж╛ржЧржЫрзЗ ржирж╛ред", language="plain")
    st.code("ржоржирзЗ рж╣ржЪрзНржЫрзЗ рж╕ржм ржХрж┐ржЫрзБ ржнрзЗржЩрзЗ ржкржбрж╝ржЫрзЗред", language="plain")
    st.code("ржЖржЬ ржЖржорж┐ ржЦрзБржм ржЖржиржирзНржжрж┐ржд!", language="plain")
    st.code("ржПржЯрж╛ ржЖржорж╛рж░ ржЬрзАржмржирзЗрж░ рж╕рзЗрж░рж╛ ржорзБрж╣рзВрж░рзНржд!", language="plain")
    st.code("рж╕ржмржХрж┐ржЫрзБ ржПржд рж╕рзБржирзНржжрж░ рж▓рж╛ржЧржЫрзЗ!", language="plain")
    st.code("ржЖржЬржХрзЗрж░ ржжрж┐ржиржЯрж╛ рж╕рждрзНржпрж┐ржЗ ржЕрж╕рж╛ржзрж╛рж░ржг!", language="plain")

# Create navigation buttons
col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
with col1:
    login_button = st.button("Login", key="login_button")
with col2:
    signup_button = st.button("Sign Up", key="signup_button")
with col3:
    data_button = st.button("Data", key="data_button")
with col4:
    contact_button = st.button("Contact Information", key="contact_button")

# Manage session state for navigation
if "selected_option" not in st.session_state:
    st.session_state["selected_option"] = None

if login_button:
    st.session_state["selected_option"] = "Login"
elif signup_button:
    st.session_state["selected_option"] = "Sign Up"
elif data_button:
    st.session_state["selected_option"] = "Data"
elif contact_button:
    st.session_state["selected_option"] = "Contact Information"

# Handle user authentication (Login and Signup)
if st.session_state["selected_option"] == "Login":
    st.subheader("Login")
    login_username = st.text_input("Username", key="login_username_input")
    login_password = st.text_input("Password", type="password", key="login_password_input")
    if st.button("Login", key="login_confirm_button"):
        if login_username in users_db and check_password(login_password, users_db[login_username]):
            st.session_state["authenticated"] = True
            st.session_state["username"] = login_username
            st.success(f"Welcome {login_username}! You are now logged in.")
        else:
            st.error("Invalid username or password.")

elif st.session_state["selected_option"] == "Sign Up":
    st.subheader("Sign Up")
    new_username = st.text_input("Choose a Username", key="signup_username_input")
    new_password = st.text_input("Choose a Password", type="password", key="signup_password_input")
    if st.button("Sign Up", key="signup_confirm_button"):
        if new_username in users_db:
            st.warning("Username already exists. Please choose a different username.")
        elif new_username and new_password:
            users_db[new_username] = hash_password(new_password)
            save_users(users_db)
            st.success("Sign up successful! You can now log in.")
        else:
            st.error("Please fill both fields.")

# Handle data and model display
elif st.session_state["selected_option"] == "Data":
    st.subheader("Data")
    if "authenticated" in st.session_state and st.session_state["authenticated"]:
        df = data_load(file_path)

        # Center the DataFrame
        st.markdown(
            """
            <div class="centered">
                <div class="dataframe-container">
                    {dataframe}
                </div>
            </div>
            """.format(dataframe=df.to_html(index=False, escape=False)),
            unsafe_allow_html=True
        )

        # Show model performance
        st.write("### Model Performance")
        model_choice = st.selectbox("Choose a model:", ['Model 1', 'Model 2'])
        model = model1 if model_choice == 'Model 1' else model2

        if model:
            loss, accuracy = model.evaluate(X_test, y_test)
            st.metric(label="Accuracy", value=f"{accuracy:.2f}")
            st.progress(accuracy)

        # Sentiment prediction
        st.write("## Predict Sentiment")
        user_input = st.text_area("Enter Bangla text for prediction", "")
        if st.button("Show Prediction", key="predict_button"):
            if user_input:
                predicted_label = predict_sentiment(user_input, model, tokenizer, encoder, max_length)
                st.success(f"Predicted Sentiment: {predicted_label}")
            else:
                st.warning("Please enter some text for prediction.")

elif st.session_state["selected_option"] == "Contact Information":
    st.subheader("Contact Information")
    st.write("Email: alomgirkabir720@gmail.com")
    st.write("Phone: +880-1234567890")
